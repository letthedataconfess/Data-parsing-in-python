<?xml version='1.0'?>
<!DOCTYPE MINIMAL-DOC SYSTEM "mini.dtd">
<MINIMAL-DOC>
<TITLE>Restricting the Weak-Generative Capacity of Synchronous
Tree-Adjoining Grammars</TITLE>
<ABSTRACT>
<P>
The formalism of synchronous tree-adjoining grammars, a variant of
standard tree-adjoining grammars (TAG), was intended to allow the use
of TAGs for language transduction in addition to language
specification.  In previous work, the definition of the transduction
relation defined by a synchronous TAG was given by appeal to an
iterative rewriting process.  The rewriting definition of derivation
is problematic in that it greatly extends the expressivity of the
formalism and makes the design of parsing algorithms difficult if not
impossible.
We introduce a simple, natural definition of synchronous
tree-adjoining derivation, based on isomorphisms between standard
tree-adjoining derivations, that avoids the expressivity and
implementability problems of the original rewriting definition.  The
decrease in expressivity, which would otherwise make the method
unusable, is offset by the incorporation of an alternative definition
of standard tree-adjoining derivation, previously proposed for
completely separate reasons, thereby making it practical to entertain
using the natural definition of synchronous derivation.  Nonetheless,
some remaining problematic cases call for yet more flexibility in the
definition; the isomorphism requirement may have to be relaxed.  It
remains for future research to tune the exact requirements on the
allowable mappings.
</P>
</ABSTRACT>
<BODY>
<DIV ID="1" DEPTH="1" R-NO="1"><HEADER>  Introduction </HEADER>
<P>
 The formalism of synchronous tree-adjoining grammars <REF/>, a variant of standard tree-adjoining grammars (TAG), was intended to
allow the use of TAGs for language transduction in addition to
language specification.  Synchronous TAGs specify relations between
language pairs; each language is specified with a standard TAG, and
the pairing between strings in the separate languages is specified by
synchronizing the two TAGs through linking pairs of elementary trees.
</P>
<P>
This paper concerns the formal definitions underlying synchronous
 tree-adjoining grammars.  In previous work <REF/>, the definition of the transduction relation defined by a synchronous TAG
was given by appeal to an iterative rewriting process, much like the
iterative rewriting of sentential forms defined by a context-free
grammar except that the syntactic objects generated by the rewriting
process were derived trees rather than strings.  This sort of
rewriting definition of derivation is problematic for several reasons.
First, the weak-generative expressivity of TAGs is increased through
the synchronization in the sense that the projection of the string
pairs onto a single component, although the strings in that component
are specified with a TAG, may not form a tree-adjoining language
(TAL).  Second, the lack of a simple recursive characterization of the
derivation -- a role filled by derivation trees for standard TAGs --
makes the design of parsing algorithms difficult if not impossible.
</P>
<P>
In this paper, we describe how synchronous TAG derivation can be
redefined so as to eliminate these problems.  The redefinition relies
on an independent redefinition of the notion of tree-adjoining
 derivation <REF/> that was motivated completely independently of worries about the generative capacity of
synchronous TAGs, but which happens to solve this problem in an
elegant manner.  Furthermore, it allows for existing parsing
algorithms to be generalized to synchronous TAG transduction in a
natural way.  However, because certain derivations in the rewriting
sense have no analogue under the new definition, some linguistic
analyses may no longer be statable.  We comment on some possible
negative ramifications of this fact.
</P>
</DIV>
<DIV ID="2" DEPTH="1" R-NO="2"><HEADER>  The Rewriting Definition of Derivation </HEADER>
<P>
The original definition of derivation for synchronous TAGs was based
on the iterative rewriting of one derived tree pair into another.  In
this section, we provide a more precise description of this approach
to derivation, along with a discussion of its problems.  First,
however, we digress to discuss some notational issues.
</P>
<DIV ID="2.1" DEPTH="2" R-NO="1"><HEADER>  Notation </HEADER>
<P>
We assume in this and later sections a general familiarity with
tree-adjoining grammars and their formal foundations, as described,
for instance, by
v87.
</P>
<P>
We will use the following notational conventions for synchronous TAGs
and related notions.  A synchronous TAG G will be given as a set of
triples 
<!-- MATH: ${\{{{\langle{L_i, R_i, \frown_i}\rangle}}\}}$ -->
<EQN/>
where the Li and Ri are
elementary trees, both initial and auxiliary, forming two component
TAGs 
<!-- MATH: $G_L = {\{{L_i}\}}$ -->
<EQN/>
and 
<!-- MATH: $G_R = {\{{R_i}\}}$ -->
<EQN/>,
and <EQN/>
is the
linking relation between tree addresses in Li and Ri.  Such a
grammar is intended to define a language of pairs 
<!-- MATH: $L(G) =
{\{{{\langle{l_i, r_i}\rangle}}\}}$ -->
<EQN/>;
the exact manner in which L(G) is determined
is the subject of this paper.  We will use the notation xL and
xR to notate the projection of a pair x onto its left and right
components, respectively, and generalize this notation to the first
and second components of a triple and pointwise on sets of pairs and
triples.  Thus, the notations GL and GR previously introduced
for the left and right component grammars are consistent with this
notation.
</P>
</DIV>
<DIV ID="2.2" DEPTH="2" R-NO="2"><HEADER>  The Rewriting Process </HEADER>
<P>
The rewriting process proceeds by choosing an initial tree pair
<!-- MATH: ${\langle{I_L, I_R, \frown}\rangle}$ -->
<EQN/>
to be the current derived tree pair and
repeatedly performing the following steps:
</P>
<P>
1.
Choose a link 
<!-- MATH: ${t_L \frown t_R}$ -->
<EQN/>
between two nodes in the
current derived tree pair.
</P>
<P>
2.
Choose an auxiliary tree pair 
<!-- MATH: ${\langle{A_L, A_R, \frown'}\rangle}$ -->
<EQN/>
from
the grammar such that AL can adjoin at tL in IL and AR can
adjoin at tR in IR.
</P>
<P>
3.
Modify the current derived tree pair by adjoining the chosen
trees at the end of the chosen link, yielding the modified derived
tree pair 
</P>
<P>
<EQN/>
</P>
<P>
This
becomes the new current derived tree pair.
</P>
<P>
The operation I[A/t] used above takes a tree I, an auxiliary tree
A, and an address t in I and yields the result of adjoining Aat address t in I.  (The generalization to allow for substitution
as well as adjunction as a primitive operation -- both in this
notation and the definition of derivation -- should be clear.)  A
formal definition for this operation is given by Vijay-Shanker
[page 15]v87 and by Shieber and Schabes
[appendix]full-alt-deriv.
</P>
<P>
The definition of the link relation in the derived tree pair <EQN/>is as follows: All links in <EQN/>
and <EQN/>
are included in
<EQN/>
(after suitable readdressing) except that the chosen link in
<EQN/>
is not itself included in <EQN/>.
Other links that impinge
on the nodes at the end of the chosen link are retained in the derived
tree pair; they link to the root or foot of the newly adjoined tree as
determined by whether the link itself is viewed as impinging on the
 top or the bottom of the node. 
</P>
</DIV>
<DIV ID="2.3" DEPTH="2" R-NO="3"><HEADER>  An Example of Rewriting </HEADER>
<P>
By way of example, we present a sample synchronous TAG that transduces
between a tiny fragment of English and a corresponding ``logical
form'' semantic representation.
</P>
<P>
 Figure <CREF/> shows the sample synchronous TAG composed of a set of tree pairs, each with a left element that is part of an
English TAG fragment and a right element that is part of a TAG
fragment for the logical form language.  Thus, the tree pair labeled
<!-- MATH: $\alpha(John)$ -->
<EQN/>
pairs a noun phrase (
<!-- MATH: $\mbox{\it NP}$ -->
<EQN/>)
initial tree dominating the
proper noun `John' with a logical term (T) dominating the constant
john.  Similarly, the tree pair 
<!-- MATH: $\alpha(blink)$ -->
<EQN/>
pairs a verb tree
for `blinked' with a tree for a formula (F) constructed as the
predication of the relation (R) given by the symbol blink to an
unspecified argument term.
</P>
<P>
Rather than present the elements of the grammar as triples, we notate
the links between nodes with diacritics.  Thus, the 
<!-- MATH: $\alpha(blink)$ -->
<EQN/>tree pair implicitly incorporates the link relation between tree
addresses given by
</P>
<P>
<EQN/>
</P>
<P>
These three links are marked with the diacritics <EQN/>,
<EQN/>,
and<EQN/>
respectively.
</P>
<P>
The <EQN/>
link, for instance, connects the 
<!-- MATH: $\mbox{\it NP}$ -->
<EQN/>
node in the left
tree at address 1 with the T node in the right at address 2, thereby
allowing the two trees of another tree pair to operate respectively at
these two nodes.  Since the two nodes are substitution nodes (as
conventionally marked by the 
<!-- MATH: $\downarrow$ -->
<EQN/>), the operations on this
link would be substitutions at both ends.  For example, the initial
tree pair 
<!-- MATH: $\alpha(John)$ -->
<EQN/>
can operate at this link, yielding the tree
 pair given in Figure <CREF/>.  Note that the remaining links in the 
<!-- MATH: $\alpha(blink)$ -->
<EQN/>
tree labeled<EQN/>
and <EQN/>
are preserved in the derived tree pair.
</P>
<P>
Continuing on in this way, the resultant derived tree pair can be
further acted upon, say, by the base pair 
<!-- MATH: $\beta(twice)$ -->
<EQN/>,
whose
elements can adjoin at the ends of the <EQN/>
link, yielding the
 derived tree pair in Figure <CREF/>.  The issue of how to handle multiple links impinging on the same node becomes relevant
here, since the right end of the remaining link <EQN/>
in the derived
tree pair impinges on a node at which adjunction has just occurred.
Should the link now impinge on the root or the foot node of the tree
adjoined at that node?  We place the link at the root, as stipulated
above, so that further rewriting of the <EQN/>
link, say with the
adverbial tree pair 
<!-- MATH: $\beta(intentionally)$ -->
<EQN/>
leads to the derived tree
 pair in Figure <CREF/>, corresponding to the string `John intentionally blinked twice'.  In the associated logical form,
the predication of int has scope over the proposition
<!-- MATH: $twice(blink(john))$ -->
twice(blink(john)), and the sentence is taken to describe a single
intentional act of blinking twice.  Had the two links been rewritten
in the other order -- link <EQN/>
first, yielding the pair in
 Figure <CREF/>, and then link <EQN/> yielding the
 pair in Figure <CREF/> -- the generated logical form 
<!-- MATH: $twice(int(blink(j)))$ -->
twice(int(blink(j))) describes two intentional acts each of single
blinkings.
</P>
<P>
Thus, this grammar manifests the ambiguity in the sentence `John
intentionally blinked twice'. Note that the ambiguity arises from the
ability to perform two rewriting steps at the same node, the root Fnode in the logical form tree 
<!-- MATH: $\alpha(blink)_R$ -->
<EQN/>
corresponding to the
word `blinked'.
</P>
</DIV>
<DIV ID="2.4" DEPTH="2" R-NO="4"><HEADER>    Problems with the Rewriting Definition
</HEADER>
<P>
There are two problems with the rewriting definition of synchronous
TAGs, having to do with the expressivity and implementability of the
formalism under that definition.
</P>
<DIV ID="2.4.1" DEPTH="3" R-NO="1"><HEADER>  Expressivity </HEADER>
<P>
Synchronous TAGs under this definition may specify
non-tree-adjoining languages.  More precisely stated, given a grammar
G, although, by definition, L(GL) is a tree-adjoining language,
L(G)L may not be.
</P>
<P>
A simple example of a synchronous TAG that can be projected onto a
 non-TAL is given in Figure <CREF/>.  This grammar specifies the string relation that pairs all strings of the form
<!-- MATH: $a^nb^nc^nd^ne^nf^ng^nh^n$ -->
a[nbncndnenfngnhn] with the empty string.  Its projection onto
its first component is, therefore, a non-tree-adjoining language.
 Figure <CREF/> shows the steps in the derivation of the n=1 case.  The derived tree pair for the n=2 case is given in
 Figure <CREF/>. 
</P>
</DIV>
<DIV ID="2.4.2" DEPTH="3" R-NO="2"><HEADER>  Implementability </HEADER>
<P>
In addition to the expressivity problem, there is no natural way to
use a synchronous grammar for transduction under this definition.  To
use a synchronous TAG G for transduction, a given string wL is to
be transduced to wR just in case 
<!-- MATH: ${\langle{w_L, w_R}\rangle} \in L(G)$ -->
<EQN/>.
This
requires, intuitively speaking, parsing of the string wL relative
to GL yielding a derivation DL, reconstruction of the
synchronous (rewriting) derivation DS from DL, and finally,
generation of the string wR according to this reconstructed
derivation.  Schematically, the process can be depicted as proceeding
thus:
</P>
<P>
<EQN/>
</P>
<P>
Unfortunately, the structure of a synchronous derivation bears no
uniform relationship to the kind of derivation postulated for standard
TAGs.  (This point is discussed further in the next section.)  Thus,
if a standard TAG parsing algorithm is used for the first step in the
process (so that DL is a traditional TAG derivation tree), the
second step is not well defined.  It is therefore not clear how
synchronous TAGs can be effectively used under this definition of
derivation.
</P>
<P>
Note that this point is independent of whether the three conceptual
phases of processing are interleaved in time.  The possibility to
interleave the computations of the phases does not make their
definition any simpler.
</P>
</DIV>
</DIV>
</DIV>
<DIV ID="3" DEPTH="1" R-NO="3"><HEADER>    The Natural Definition of Derivation
</HEADER>
<P>
The notion of derivation just presented for synchronous TAGs is quite
nonstandard for the TAG literature in being ``flat'' and rewriting
oriented.  Recall that the standard definition of TAG derivation, due
to v87, is hierarchically structured in terms of derivation trees, trees that serve to characterize the operations
required to construct a particular derived tree, and hence its yield.
</P>
<P>
TAG derivation trees are composed of nodes, conventionally notated as
<EQN/>,
possibly in its subscripted variants.  The parent of a node
<EQN/>
in a derivation tree will be written 
<!-- MATH: $parent(\eta)$ -->
<EQN/>,
and the
tree that the node marks adjunction of will be notated 
<!-- MATH: $tree(\eta)$ -->
<EQN/>.
The tree 
<!-- MATH: $tree(\eta)$ -->
<EQN/>
is to be adjoined into its parent
<!-- MATH: $tree(parent(\eta))$ -->
<EQN/>
at an address specified on the arc in the tree
linking the two; this address is notated 
<!-- MATH: $addr(\eta)$ -->
<EQN/>.
(Of course the
root node has no parent or address; the parent and addr functions
are partial.)
</P>
<P>
A derivation tree is well-formed if for each arc in the derivation
tree from <EQN/>
to 
<!-- MATH: $parent(\eta)$ -->
<EQN/>
labeled with 
<!-- MATH: $addr(\eta)$ -->
<EQN/>,
the tree
<!-- MATH: $tree(\eta)$ -->
<EQN/>
is an auxiliary tree that can be adjoined at the node
<!-- MATH: $addr(\eta)$ -->
<EQN/>
in 
<!-- MATH: $tree(parent(\eta))$ -->
<EQN/>.
(Alternatively, 
<!-- MATH: $tree(\eta)$ -->
<EQN/>
is
an initial tree that can be substituted at the node 
<!-- MATH: $addr(\eta)$ -->
<EQN/>
in
<!-- MATH: $tree(parent(\eta))$ -->
<EQN/>.)  Furthermore, and without loss of expressivity,
it is standard to exclude multiple sibling arcs specifying operations
at the same tree address in the same tree.  This exclusion makes the
definition of the derived tree for a given derivation tree
determinate.
</P>
<P>
A derivation tree specifies a derived tree by virtue of the normal
definitions for adjunction and substitution.  The language of a TAG
G is then the set of strings that are the yields of derived trees
specified by derivation trees that are well-formed according to G.
We define the function <EQN/>
from derivation trees to the derived
trees they specify, according to the following recursive definition:
</P>
<P>
<EQN/>
</P>
<P>
Here 
<!-- MATH: $I[A_1/t_1, \ldots, A_k/t_k]$ -->
<EQN/>
specifies the simultaneous
adjunction (or substitution) of trees A1 through Ak at t1through tk, respectively, in I.  Using the definitions of
Vijay-Shanker v87, this is well defined only as long as
the ti are disjoint, hence the need for the aforementioned
exclusion.
</P>
<P>
A definition along these lines for synchronous TAGs would be quite
natural.  We would have derivation trees that specify at each node an
elementary tree pair, with arcs labeled by pairs of tree
addresses (such that the two addresses are linked in the parent
elementary tree pair).  A function from derivation trees to the
derived tree pairs they specify -- a generalization of the <EQN/>function defined above -- would then be used to generate the derived
trees and the language of a synchronous grammar.
</P>
<P>
It should be obvious that such a synchronous derivation tree can be
trivially restated as a pair of standard derivation trees, further
simplifying the definition of synchronous TAG derivation.  This leads
to the following definition of synchronous TAG derivation.  A
derivation is a pair 
<!-- MATH: ${\langle{D_L, D_R}\rangle}$ -->
<EQN/>
where
</P>
<P>
1.
DL is a well-formed derivation tree relative to GL.
</P>
<P>
2.
DR is a well-formed derivation tree relative to GR.
</P>
<P>
3.
DL and DR are isomorphic.  That is, there is  a one-to-one
onto mapping f from the nodes of DL to the nodes of DR that
preserves dominance, i.e., if 
<!-- MATH: $f(\eta_l) = \eta_r$ -->
<EQN/>
then
<!-- MATH: $f(parent(\eta_l)) = parent(\eta_r)$ -->
<EQN/>.
</P>
<P>
4.
The isomorphic operations are sanctioned by links in tree pairs.
That is, if 
<!-- MATH: $f(\eta_l) = \eta_r$ -->
<EQN/>,
then there is a tree pair
<!-- MATH: ${\langle{tree(\eta_l), tree(\eta_r), \frown'}\rangle}$ -->
<EQN/>
in G.  Furthermore, if
<EQN/>
has a parent, then there is a tree pair
</P>
<P>
<EQN/>
</P>
<P>
in G and
<!-- MATH: $addr(\eta_l) \frown addr(\eta_r)$ -->
<EQN/>.
</P>
<P>
This, then, is the most natural definition of synchronous
tree-adjoining derivation, as it is the natural generalization of the
definition of derivation for standard TAGs.  It merely requires that
there be two derivations that are separately well-formed and
appropriately synchronized as specified by the links.
</P>
<P>
Several aspects of this definition are noteworthy. First, the derived
tree pair for a derivation 
<!-- MATH: ${\langle{D_L, D_R}\rangle}$ -->
<EQN/>
is 
<!-- MATH: ${\langle{{\cal D}(D_L),
{\cal D}(D_R)}\rangle}$ -->
<EQN/>.
Second, the definition does not require extra linking
information specifying whether the link impinges on the top or bottom
of the linked nodes.  It is completely declarative; no vestiges remain
of the rewriting definition.  Finally, it solves the two problems of
expressivity and implementability mentioned above, as described in the
next section.
</P>
</DIV>
<DIV ID="4" DEPTH="1" R-NO="4"><HEADER>    Advantages of the Natural Definition
</HEADER>
<P>
We show in this section that the natural definition of synchronous
derivation solves the two problems described in
 Section <CREF/>. 
</P>
<DIV ID="4.1" DEPTH="2" R-NO="1"><HEADER>  Expressivity </HEADER>
<P>
Under the revised definition of synchronous derivation, only
tree-adjoining languages can be expressed by a synchronous TAG.  To
see why, we look first at the problematic example of
 Figure <CREF/>, and then turn to a general argument. 
</P>
<P>
Under the new definition, adjoining constraints are no longer
inherited in an overall derived tree being generated incrementally in
the flat rewriting process.  Rather, they apply to the auxiliary trees
that directly adjoin to the node.  Thus, in the grammar of
 Figure <CREF/>, the links in the auxiliary trees can never be operated on.  For instance, the link in <EQN/>
requires <EQN/>to be adjoined there, but its corresponding left half cannot adjoin at
the left end of the link.  Similarly, the link in <EQN/>
is useless
as well.  Thus, the only well-formed derivation is the one with no
adjunctions whatsoever; the language of the grammar includes the
single string pair 
<!-- MATH: ${\langle{\epsilon, \epsilon}\rangle}$ -->
<EQN/>
generated by its initial
tree pair.
</P>
<P>
In general under the revised definition, the left-projection language,
say, of a synchronous TAG is specifiable by a pure TAG by simply
mapping any adjoining constraints on the right trees to corresponding
ones on the linked nodes on the left and projecting the grammar on its
 left component.  (The example of Figure <CREF/>, so  projected, is the normal TAG given in Figure <CREF/>, which specifies the language containing only the empty string as
expected.)
</P>
<P>
Alternatively, the TAL nature of synchronous TAGs under this
definition can be easily shown by reduction to tree-set-local
multicomponent TAGs (MCTAG), which are known to generate only
 tree-adjoining languages. Each elementary tree pair in the synchronous TAG corresponds to an elementary tree set in the MCTAG.
To ensure that left-hand trees are not adjoined into right-hand trees
and vice versa, the node labels on the left- and right-hand trees are
uniformly renamed apart.  Each node in a left-hand tree is marked with
a selective adjoining constraint that allows adjunction only of
certain elementary tree sets.  For each link that impinges on the
node, and each tree pair that can operate on that link, the
corresponding tree set is allowed by the SA constraint.  Similar
constraints are added to each right-hand node.  Finally, for each pair
of nonterminals that root the trees in an initial tree pair, a new
elementary tree is constructed rooted in a new nonterminal symbol not
used elsewhere with two nonterminal children labeled by the left and
right root nonterminals of the initial tree pair and which are to be
filled by substitution.
</P>
<P>
Since any synchronous TAG can be reduced to a tree-set-local MCTAG,
the languages generated by synchronous TAGs are at most the
tree-adjoining languages.  The converse inclusion is obvious.
</P>
</DIV>
<DIV ID="4.2" DEPTH="2" R-NO="2"><HEADER>  Implementability </HEADER>
<P>
Another advantage of the new definition of synchronous derivation is
in its utility for implementation of synchronous TAG transducers.
Recall that under the rewriting definition, the structure of a
synchronous derivation bears no uniform relationship to the kind of
derivation postulated for standard TAGs and therefore recovered by
standard TAG parsing algorithms.  Thus, the second step in the
schematic process
</P>
<P>
<EQN/>
</P>
<P>
is not well defined.  Under the natural definition, however, the
synchronous derivation DS is just 
<!-- MATH: ${\langle{D_L,D_R}\rangle}$ -->
<EQN/>.
This close
relation between a synchronous TAG derivation and derivations for the
left and right projected grammars makes synchronous transduction
straightforward.  Any method for parsing that generates a standard
derivation tree for a grammar can be applied to parse a string wLrelative to the left projection grammar.  The resultant derivation is
isomorphic to the derivation tree for the right projection grammar,
where the mapping is given directly by the synchronous grammar.  The
right projection derivation is thus easily constructed, and the
corresponding derivation tree can be computed directly.
Schematically, the process looks like this:
</P>
<P>
<EQN/>
</P>
<P>
This methodology applies even under the view of synchronous TAG
 derivations to be described in Section <CREF/>.  For instance, full-alt-deriv describe a parsing method for
standard TAGs that can be used to construct derivation trees on the
fly while parsing.  A simple modification of the method can construct
the isomorphic derivation tree for the object grammar of a
transduction.  In fact, this redefinition has allowed for the first
implementation of synchronous TAG processing, due to Onnig
Dombalagian.  This implementation was based on the inference-based TAG
 parser that we have presented elsewhere <REF/>. 
</P>
</DIV>
</DIV>
<DIV ID="5" DEPTH="1" R-NO="5"><HEADER>  Problems with the Natural Definition </HEADER>
<P>
Along with the advantages of the new definition of synchronous TAG
derivation, new problems are introduced as well.  First, the exclusion
of multiple adjunctions at a single address is problematic for
synchronous TAG derivations.  Second, the isomorphism requirement
between the derivation trees may be too strong as well.  The former
problem admits of a straightforward solution, which we describe below.
The latter does not; we describe the symptoms of the problem but leave
its resolution as an open issue for further research.
</P>
<DIV ID="5.1" DEPTH="2" R-NO="1"><HEADER>    Multiple Adjunction
</HEADER>
<P>
Consider the synchronous TAG analysis of the semantics of adverbs
 given in Figure <CREF/>.  This grammar is intended to allow for the ambiguity of strings such as `John intentionally
 blinked twice' as shown in Figure <CREF/>. As previously mentioned, the ambiguity arises from the ability to perform
two rewriting steps at the same node, the root F node in the
elementary tree 
<!-- MATH: $\alpha(blink)_R$ -->
<EQN/>
corresponding to the word `blinked'.
Under the natural definition, however, this would entail a derivation
 tree pair of the geometry given in Figure <CREF/>.  But the right derivation tree is ill-formed, as it violates the
prohibition against multiple adjunctions at a single address.
</P>
<P>
It was the desire to model semantic ambiguity through violations of
the prohibition that led us originally to a rewriting -- as opposed
to a derivation tree -- approach to defining synchronous TAG
derivation.  Thus, the deviation from the natural definition of
synchronous derivation was necessary because we required the ability
of two elementary trees to be adjoined at the same node.
Unfortunately, the rewriting interpretation of TAGs is a very
inelegant way in which to get this ability, leading as it does to the
 problems described in Section <CREF/>.  Nonetheless, without this ability, the utility of synchronous TAGs is severely
diminished.
</P>
<P>
For quite separate reasons, Schabes and I have been examining
alternatives to Vijay-Shanker's definition of TAG derivation so as to
allow for multiple adjunctions of certain auxiliary trees at the same
 node.  Our solution <REF/> divides the class of auxiliary trees into two types, modifier trees and predicative trees, of which only the former allow such multiple
adjunctions.  In Vijay-Shanker's definition of derivation, a
derivation tree is well-formed if no two auxiliary trees are adjoined
at the same node in the same tree.  In our revised definition, a
derivation tree is well-formed if no two predicative auxiliary
trees are adjoined at the same node in the same tree.  Furthermore, so
as to determinately specify a derived tree, all modifier trees that
are adjoined at the same node in the same tree are ordered with
 respect to one another.  Figure <CREF/> shows the  interpretation, in terms of derived tree (<CREF/>), of a  derivation tree (<CREF/>) with multiple adjunctions at a single node.  In essence, this diagram gives the interpretation of the
operation 
<!-- MATH: $I[A_1/t_1, \ldots, A_k/t_k]$ -->
<EQN/>
when the tk are not
disjoint.
</P>
<P>
The existence of the revised definition of derivation vitiates the
argument for the flat definition of synchronous TAG derivation.
Rather, a direct definition is now possible along the previous lines.
The only difference is that DL and DR are taken to be
well-formed derivation trees of the new variety.  Taking the trees
<!-- MATH: $\beta(twice)_R$ -->
<EQN/>
and 
<!-- MATH: $\beta(intentionally)_R$ -->
<EQN/>
to be modifier trees,
 the synchronous derivation in Figure <CREF/> is well-formed.  The two possible orderings of the child nodes adjoining
at address <EQN/>
provide for the two readings of the ambiguous
sentence.
</P>
</DIV>
<DIV ID="5.2" DEPTH="2" R-NO="2"><HEADER>  The Isomorphism Requirement </HEADER>
<P>
A potentially more severe (and certainly more subtle) problem results
from the requirement of isomorphism between DL and DR.  There
seem to be certain applications of synchronous TAGs for which this
requirement is too strong.  In this section, we present a taxonomy of
potential counterexamples to isomorphism, organized by the ``shape''
of the nonisomorphic part of the mapping between the derivation trees.
The examples are drawn from both technological application of
synchronous TAG to the problem of defining translations between
languages and application of synchronous TAG to the modeling of
natural language semantics.  It may turn out that different
applications provide different amounts of pressure to loosen the
isomorphism requirement in differing ways.  Although we discuss
several possible approaches to resolving this issue, we leave to
further work whether a satisfactory solution for a given application
can be found, and if so, what that solution might be.
</P>
<DIV ID="5.2.1" DEPTH="3" R-NO="1"><HEADER>  Many-to-One Mappings </HEADER>
<P>
<!-- MATH: $\psfig{figure=Figures/many-one.ps}$ -->
<EQN/>
</P>
<P>
The simplest examples are cases in which an atomic construction in one
language is compound in another.  For example, asj90 point
out that the English adverbial `hopefully' is translated by the French
phrase `on espre que'.  Whereas the English corresponds to a
single elementary tree, the French corresponds to a tree derived by
substituting the elementary tree for `on' as the NP argument of
`espre'.  Such examples argue for the ability to allow the
mapping between the left and right derivation trees to be relaxed from
a strict isomorphism.
</P>
<P>
One might think (as indeed the present author did before penetrating
discussions with Anthony Kroch) that a mismatch such as this shows
that the isomorphism requirement must also be too strong for the
purpose of modeling natural language semantics, for if these two
constructions -- `hopefully' and `on espre que' -- have the
same semantics, then at least one of the two (if not both) must
exhibit a mismatch between the natural language derivation and a
derivation of its logical form.  The error in this reasoning follows
from the assumption that the relationship of ``corresponds as an
appropriate translation'' (in the sense in which bilingual
dictionaries record such facts) is tantamount to ``means the same
as''.  This assumption is highly suspect.  Bilingual dictionaries do
not codify perfect translations in any sense, if such a notion is even
coherent.
</P>
<P>
However, mismatches of this variety may also be found in applications
to directly modeling natural-language semantics.  For instance, the
transduction relationship between a compound idiom (such as `kick
the bucket') and its atomic semantics (given, e.g., by a simple
predication of die) might be thought to be of this form.
</P>
</DIV>
<DIV ID="5.2.2" DEPTH="3" R-NO="2"><HEADER>  Elimination of Dominance </HEADER>
<P>
<!-- MATH: $\psfig{figure=Figures/new-dom.ps}$ -->
<EQN/>
</P>
<P>
Even when the number of nodes in the paired derivation trees is the
same, they may exhibit different structure.  Nodes participating in a
domination relationship in one tree may be mapped to nodes neither of
which dominates the other.
</P>
<P>
Abeill (personal communication) has noted a potential example of
such a mismatch.  For instance, in the sentence
</P>
<P>
Le docteur soigne les dents de Jean.
The doctor treats Jean's teeth.
</P>
<P>
the subphrase `de Jean' is substituted into the
`dents' tree syntactically, and arguably modifies the semantics
of that tree as well.  However, the cliticized version of the sentence
</P>
<P>
 Le docteur lui soigne les dents. The doctor treats his teeth.
</P>
<P>
involves syntactic adjunction of the clitic `lui' in the
tree for `soigne', although the translation into English, as before,
places the pronoun within the object NP of the verb.  Schematically,
the derivation trees should show the geometry given in
 Figure <CREF/>.  Note that the separate derivations are not isomorphic; a sibling relation in one tree corresponds to a
domination relation in the other.
</P>
<P>
Again, examples may be found in the arena of semantic interpretation.
Although the argumentation is much more complex, and well beyond the
scope of this paper, similar relationships arise in the context of
modeling quantifier scope ambiguity.
</P>
</DIV>
<DIV ID="5.2.3" DEPTH="3" R-NO="3"><HEADER>  Inversion of Dominance </HEADER>
<P>
<!-- MATH: $\psfig{figure=Figures/invert.ps}$ -->
<EQN/>
</P>
<P>
An even more extreme relationship, in which domination relationships
are not only introduced but actually inverted, is exemplified by the
 French sentence and its English translation given in (<CREF/>), and discussed by whitelock-shake.
</P>
<P>
  Jean monte la rue en courant.  John runs up the street.
</P>
<P>
In this example, the phrase `en courant' adjoins as an
adverbial modifier to the verb `monte'.  Presumably, `en courant'
would be paired with the English `runs' and `monte' with the English
`up'.  But the derivation tree for the English sentence would not then
have the isomorphic structure in which `runs' adjoins or substitutes
into `up', at least under the most natural analysis.  Rather, the
converse should hold; `up' should be inserted into `runs'.
 Figure <CREF/> shows the derivation tree pair schematically, including the nonisomorphism mapping between the trees.
</P>
<P>
We know of no example of inversion of dominance in applications to
natural-language semantics.
</P>
</DIV>
</DIV>
<DIV ID="5.3" DEPTH="2" R-NO="3"><HEADER>  Relaxing Isomorphism </HEADER>
<P>
In many of the above examples, although the mapping among derivation
nodes is not an isomorphism, the deviation from isomorphism is nicely
bounded, so that they could be well handled by allowing bounded
subderivations to be considered elementary for the purpose of defining
the relationship between the trees.  In using synchronous TAGs as a
model for language translation, that is, essentially to specify a
bilingual lexicon, it is not surprising that bounded subderivations in
one language are paired as a whole with bounded subderivations in
another.  Indeed, this is the modus operandi for traditional bilingual
dictionaries.  The Harper/Collins/Robert English-French dictionary
provides an entry for `to [run] down/in/off' with translation
`descendre/entrer/partir en courant' essentially providing the
mapping between the pertinent subderivations.  Similarly, the
pertinent entry under `hopefully' specifies the translation of
`[hopefully] it won't rain' as `on espre qu'il ne va pas
pleuvoir', providing implicitly the subderivation mapping of
`hopefully' in its presentential position with `on espre
que'.  For the most part, placing the isomorphism at the level of
certain primitive and bounded subderivations is plausible,
 sufficiently expressive, and  retains the advantages described in Section    <CREF/>. 
</P>
<P>
If further relaxation of the isomorphism requirement is to be allowed,
some method of controlling the relationship between the pair
derivations will be needed.  Owen Rambow and Giorgio Satta (personal
communication) have conjectured that an approach along the lines of
control grammars might be useful. This possibility, though
tantalizing, remains to be explored.
</P>
<P>
Whitelock's method of ``shake-and-bake'' translation
 <REF/>, under which translation involves reusing the same components but under different relationships, seems to
correspond to a version of synchronous TAGs in which there is no
constraint on the geometries of the derivation trees, the only
requirement being that they are constructed from paired elements.
This extreme version of relaxing the isomorphism requirement may in
the end be necessary.
</P>
<P>
The exact nature of the relationship between paired derivation
trees must remain for future work.
</P>
</DIV>
</DIV>
<DIV ID="6" DEPTH="1" R-NO="6"><HEADER>  Conclusion </HEADER>
<P>
We have introduced a simple, natural definition of synchronous
tree-adjoining derivation, based on isomorphisms between standard
tree-adjoining derivations, that avoids the expressivity and
implementability problems of the original rewriting definition.  The
decrease in expressivity, which would otherwise make the method
unusable, is offset by the incorporation of an alternative definition
of standard tree-adjoining derivation, previously proposed for
completely separate reasons, that allows for multiple adjunctions at a
single node in an elementary tree.  The increased flexibility from the
ability to perform such multiple adjunctions makes it conceivable to
entertain using the natural definition of synchronous derivation.
Nonetheless, some remaining problematic cases call for yet more
flexibility in the definition; the isomorphism requirement may have to
be relaxed.  It remains for future research to tune the exact
requirements on the allowable mappings.
</P>
<DIV ID="6.1" DEPTH="2" R-NO="1"><HEADER>  Acknowledgements </HEADER>
<P>
The research described in this paper was made possible in part by a
Presidential Young Investigator grant IRI-91-57996 from the National
Science Foundation and matching funds from Xerox Corporation.  An
early version of this paper was presented at the Second Workshop on
Tree-Adjoining Grammars, in Philadelphia, PA, in August 1992.  The
author is indebted to the following people for helpful discussions on
the subject matter of this paper: Anne Abeill, Aravind Joshi,
Owen Rambow, Giorgio Satta, Yves Schabes, K. Vijay-Shanker, David
Weir, and Peter Whitelock.
</P>
</DIV>
<DIV ID="6.2" DEPTH="2" R-NO="2"><HEADER>Bibliography </HEADER>
<P>
Abeill, Anne, Yves Schabes, and Aravind K. Joshi.
1990.
Using lexicalized tree adjoining grammars for machine translation.
In Proceedings of the 13th International Conference on
  Computational Linguistics (COLING'90), Helsinki, August.
</P>
<P>
Schabes, Yves and Stuart M. Shieber.
1994.
An alternative conception of tree-adjoining derivation.
Computational Linguistics, 20(1):91-124, March.
Also available as cmp-lg/9404001.
</P>
<P>
Shieber, Stuart M. and Yves Schabes.
1990.
Synchronous tree-adjoining grammars.
In Proceedings of the 13th International Conference on
  Computational Linguistics, Helsinki.
</P>
<P>
Vijay-Shanker, K.
1987.
A Study of Tree Adjoining Grammars.
Ph.D. thesis, Department of Computer and Information Science,
  University of Pennsylvania.
</P>
<P>
Whitelock, Peter.
1992.
Shake-and-bake translation.
In Proceedings of the 14th International Conference on
  Computational Linguistics (COLING '92), Nantes, France, July.
</P>
<DIV ID="6.2.1" DEPTH="3" R-NO="1"><HEADER>Footnotes</HEADER>
<P>
  In previous work, links were
typically thought of as impinging on the top of a node unless
otherwise stated.  We will retain that convention here.  Further
flexibility can be obtained by allowing each link to specify whether
it links to the top or bottom of the nodes.  Thus, the link relation
<EQN/>
in a triple 
<!-- MATH: ${\langle{L_i, R_i, \frown_i}\rangle}$ -->
<EQN/>
can be thought of as
being of type 
<!-- MATH: $dom(L_i) \times {\{{ \uparrow, \downarrow}\}} \times
dom(R_i) \times {\{{\uparrow, \downarrow}\}}$ -->
<EQN/>,
where dom(A) is the set
of tree addresses in the tree A and <EQN/>
and 
<!-- MATH: $\downarrow$ -->
<EQN/>serve as markers to specify whether the link impinges on the top or
bottom, respectively, of the specified node.  All of this machinery
becomes superfluous, however, in the context of the natural definition
 of derivation given in Section <CREF/>. 
  The observation that synchronous
TAGs under the new definition should be reducible to MCTAG was brought
to our attention by Owen Rambow.
  The French clitic example, however,
remains problematic.  The relation between the clitic and the NP which
it is semantically related to seems to be potentially unbounded.
</P>
</DIV>
</DIV>
</DIV>
</BODY>
</MINIMAL-DOC>
